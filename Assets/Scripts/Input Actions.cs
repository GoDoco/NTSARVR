//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions"",
    ""maps"": [
        {
            ""name"": ""NTS"",
            ""id"": ""eaed6871-f92f-4ac2-afeb-ecc437b1911e"",
            ""actions"": [
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""480df7a3-2a0c-479e-9c52-131c084b5f2a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""8d45a565-364a-44e1-84f9-1f33da2106fe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c84f06f9-7f5c-45c6-a501-62a64c6880c7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPos"",
                    ""type"": ""PassThrough"",
                    ""id"": ""aeae4fb1-ccab-486a-bc9c-9ad15effcb74"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4ad3b270-498c-4a6f-a024-2e298523b609"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fa5578a2-a305-446f-85ae-572674925ff7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ed7f0fc0-201b-49e6-9c6b-ee66000b1c7c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3802e058-ca13-4122-9a5f-886f4b6fd8e0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7a76e85c-64d2-4f2f-afdd-df6e2cd55179"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ee27662-ba4a-4ec9-b44a-53163ca45432"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // NTS
        m_NTS = asset.FindActionMap("NTS", throwIfNotFound: true);
        m_NTS_Space = m_NTS.FindAction("Space", throwIfNotFound: true);
        m_NTS_Horizontal = m_NTS.FindAction("Horizontal", throwIfNotFound: true);
        m_NTS_TouchPress = m_NTS.FindAction("TouchPress", throwIfNotFound: true);
        m_NTS_TouchPos = m_NTS.FindAction("TouchPos", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_NTS.enabled, "This will cause a leak and performance issues, InputActions.NTS.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // NTS
    private readonly InputActionMap m_NTS;
    private List<INTSActions> m_NTSActionsCallbackInterfaces = new List<INTSActions>();
    private readonly InputAction m_NTS_Space;
    private readonly InputAction m_NTS_Horizontal;
    private readonly InputAction m_NTS_TouchPress;
    private readonly InputAction m_NTS_TouchPos;
    public struct NTSActions
    {
        private @InputActions m_Wrapper;
        public NTSActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Space => m_Wrapper.m_NTS_Space;
        public InputAction @Horizontal => m_Wrapper.m_NTS_Horizontal;
        public InputAction @TouchPress => m_Wrapper.m_NTS_TouchPress;
        public InputAction @TouchPos => m_Wrapper.m_NTS_TouchPos;
        public InputActionMap Get() { return m_Wrapper.m_NTS; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NTSActions set) { return set.Get(); }
        public void AddCallbacks(INTSActions instance)
        {
            if (instance == null || m_Wrapper.m_NTSActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NTSActionsCallbackInterfaces.Add(instance);
            @Space.started += instance.OnSpace;
            @Space.performed += instance.OnSpace;
            @Space.canceled += instance.OnSpace;
            @Horizontal.started += instance.OnHorizontal;
            @Horizontal.performed += instance.OnHorizontal;
            @Horizontal.canceled += instance.OnHorizontal;
            @TouchPress.started += instance.OnTouchPress;
            @TouchPress.performed += instance.OnTouchPress;
            @TouchPress.canceled += instance.OnTouchPress;
            @TouchPos.started += instance.OnTouchPos;
            @TouchPos.performed += instance.OnTouchPos;
            @TouchPos.canceled += instance.OnTouchPos;
        }

        private void UnregisterCallbacks(INTSActions instance)
        {
            @Space.started -= instance.OnSpace;
            @Space.performed -= instance.OnSpace;
            @Space.canceled -= instance.OnSpace;
            @Horizontal.started -= instance.OnHorizontal;
            @Horizontal.performed -= instance.OnHorizontal;
            @Horizontal.canceled -= instance.OnHorizontal;
            @TouchPress.started -= instance.OnTouchPress;
            @TouchPress.performed -= instance.OnTouchPress;
            @TouchPress.canceled -= instance.OnTouchPress;
            @TouchPos.started -= instance.OnTouchPos;
            @TouchPos.performed -= instance.OnTouchPos;
            @TouchPos.canceled -= instance.OnTouchPos;
        }

        public void RemoveCallbacks(INTSActions instance)
        {
            if (m_Wrapper.m_NTSActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INTSActions instance)
        {
            foreach (var item in m_Wrapper.m_NTSActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NTSActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NTSActions @NTS => new NTSActions(this);
    public interface INTSActions
    {
        void OnSpace(InputAction.CallbackContext context);
        void OnHorizontal(InputAction.CallbackContext context);
        void OnTouchPress(InputAction.CallbackContext context);
        void OnTouchPos(InputAction.CallbackContext context);
    }
}
